*** Settings ***
Documentation   This suite contains test for 'Put File 'keywords These tests use some dummy test files from under the scripts directory.
Force Tags      pybot   jybot
Suite Setup     Login As Valid User
Suite Teardown  Run Keywords  Remove Test Files and Close Connections  Remove Local Tempdir
Resource        resources/ssh_library_resources.txt
Library         String

*** Variables ***
${TMPDIR}  robot-tmpdir

*** Test Cases ***
Put File With Absolute Destination
    Put Files And Verify  ${TEST FILE}  ${USER HOME}/  ${TEST FILE NAME}
    [Teardown]  Execute Command  rm -f ${TEST FILE NAME}

Put File With Relative Destination
    Put Files And Verify  ${TEST FILE}  foo.txt  foo.txt
    [Teardown]  Execute Command  rm -f foo.txt

Put File To Home Directory
    Put Files And Verify  ${TEST FILE}  .  ${TEST FILE NAME}
    [Teardown]  Execute Command  rm -f ${TEST FILE NAME}

Put File With Different Name
    Put Files And Verify  ${TEST FILE}  ${USER HOME}/another_name.txt  another_name.txt
    [Teardown]  Execute Command  rm -f another_name.txt

Put File With Newlines
    Put Files And Verify  ${FILE WITH NEWLINES}  ${USER HOME}/  ${FILE WITH NEWLINES NAME}
    [Teardown]  Execute Command  rm -f ${FILE WITH NEWLINES NAME}

Put File With Non-ASCII Characters
    Put Files And Verify  ${FILE WITH NON-ASCII}  ${USER HOME}/  ${FILE WITH NON-ASCII NAME}
    [Teardown]  Execute Command  rm -f ${FILE WITH NON-ASCII NAME}

Put File And Specify Remote Newlines
    [Setup]  Create Directory  ${TMPDIR}
    Put File And Specify Newlines  ${FILE WITH NEWLINES}  ${USER HOME}/  CRLF  ${FILE WITH NEWLINES NAME}
    SSHLibrary.Get File  ${USER HOME}/${FILE WITH NEWLINES NAME}  ${TMPDIR}${/}
    ${content}=  OS.Get Binary File  ${TMPDIR}${/}${FILE WITH NEWLINES NAME}
    ${expected}=  OS.Get File  ${FILE WITH NEWLINES}
    ${expected}=  Replace String  ${expected}  \n  \r\n
    Should Be Equal  ${content}  ${expected}
    [Teardown]  Execute Command  rm -f ${FILE WITH NEWLINES NAME}

Put File With Pattern
    Put Files And Verify  ${TEST FILE PATTERN}  ${USER HOME}/  ${TEST FILE NAME}  ${TEST FILE 2 NAME}
    [Teardown]  Execute Command  rm -f ${TEST FILE NAME} ${TEST FILE 2 NAME}

Putting Multiple Source Files To Single File Fails
    Run Keyword And Expect Error  ValueError: It is not possible to copy multiple source files to one destination file.  Put File  ${TEST FILE PATTERN}  ${USER HOME}/invalid.txt

Put File To Absolute Destination With Missing Subdirectories
    Put File  ${TEST FILE}  ${USER HOME}/robotdir/
    Verify Remote Files Exist  robotdir  ${TEST FILE NAME}
    [Teardown]  Execute Command  rm -rf robotdir

Put File To Relative Destination With Missing Subdirectories
    Put File  ${TEST FILE}  robotdir/anotherdir/foo.txt
    Verify Remote Files Exist  robotdir/anotherdir  foo.txt
    [Teardown]  Execute Command  rm -rf robotdir

Put File With Pattern Matching Directory
    Put Files And Verify  ${SCRIPTS}test_fi*  ${USER HOME}/  ${TEST FILE NAME}  ${TEST FILE 2 NAME}
    [Teardown]  Execute Command  rm -f ${TEST FILE NAME} ${TEST FILE 2 NAME}

Put File Should Fail When There Are No Source Files
    Run Keyword And Expect Error  There are no source files matching 'non*existing'  SSHLibrary.Put File  non*existing

Put File with special characters in filename
    [Documentation]    http://code.google.com/p/robotframework-sshlibrary/issues/detail?id=55
    Enable SSH Logging     ${TEMPDIR}${/}ssh_log.txt
    Put File  ${SPECIAL CHARS FILE}  ${USER HOME}/robotdir/
    Verify Remote Files Exist  robotdir  foo%2Fbar.txt
    [Teardown]  Execute Command  rm -rf robotdir

*** Keywords ***
Put Files And Verify
    [Arguments]  ${source}  ${destination}  @{expected}
    Vefify Remote Files do Not Exist  @{expected}
    Put File  ${source}  ${destination}
    Verify Remote Files Exist  ${EMPTY}  @{expected}

Put File And Specify Newlines
    [Arguments]  ${source}  ${destination}  ${newlines}  @{expected}
    Vefify Remote Files do Not Exist  @{expected}
    Put File  ${source}  ${destination}  newline=${newlines}
    Verify Remote Files Exist  ${EMPTY}  @{expected}

Vefify Remote Files do Not Exist
    [Arguments]  @{expected}
    ${listing} =  Execute Command  ls
    : FOR  ${filename}  IN  @{expected}
    \  Should Not Contain  ${listing}  ${filename}

Verify Remote Files Exist
    [Arguments]  ${dirname}  @{expected}
    ${listing} =  Execute Command  ls ${dirname}
    : FOR  ${filename}  IN  @{expected}
    \  Should Contain  ${listing}  ${filename}

Remove Local Tempdir
    Remove Directory  ${TMPDIR}  yes
