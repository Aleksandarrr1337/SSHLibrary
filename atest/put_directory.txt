*** Settings ***
Force Tags      pybot   jybot
Suite Setup     Login As Valid User
Suite Teardown  Close All Connections
Test Teardown   Remove Remote Files  ${target}
Resource        resources/ssh_library_resources.txt

*** Test Cases ***
Put Directory To Existing Remote Path
    ${target} =  Set Variable  ${USER HOME}
    Verify Remote Directory Exists  ${target}
    Put Directory  ${TEXTFILES}  ${target}
    ${target} =  Set Variable  ${target}${/}textfiles
    Remote Directory Should Exist With Content  ${target}

Put Directory To Non-Existing Remote Path
    ${target} =  Set Variable  another_dir_name
    Verify Remote Directory Does Not Exists  ${target}
    Put Directory  ${TEXTFILES}  ${target}
    Remote Directory Should Exist With Content  ${target}

Put Directory Including Subdirectories To Existing Remote Path
    ${target} =  Set Variable  ${USER HOME}
    Verify Remote Directory Exists  ${target}
    Put Directory  ${TEXTFILES}  ${target}  recursive=True
    ${target} =  Set Variable  ${target}${/}textfiles
    Remote Directory Should Exist With Subdirectories  ${target}

Put Directory Including Subdirectories To Non-Existing Remote Path
    ${target} =  Set Variable  another/dir/path
    Verify Remote Directory Does Not Exists  ${target}
    Put Directory  ${TEXTFILES}  ${target}  recursive=True
    Remote Directory Should Exist With Subdirectories  ${target}
    ${target} =  Set Variable  another

Put Directory To Current Remote Path
    ${target} =  Set Variable  .
    Verify Remote Directory Exists  ${target}
    Put Directory  ${TEXTFILES}  ${target}
    ${target} =  Set Variable  ${target}${/}textfiles
    Remote Directory Should Exist With Content  ${target}

Put Directory Using Relative Source
    ${target} =  Set Variable  ${USER HOME}
    Verify Remote Directory Exists  ${target}
    Put Directory  textfiles  ${target}
    ${target} =  Set Variable  ${target}${/}textfiles
    Remote Directory Should Exist With Content  ${target}

Put Directory Should Fail When Source Does Not Exists
    ${target} =  Set Variable  another_dir_name
    Run Keyword And Expect Error  There was no source path matching 'non-existing'  Put Directory  non-existing
    Verify Remote Directory Does Not Exists  ${target}

*** Keywords ***
Verify Remote Directory Exists
    [Arguments]  ${destination}
    SSHLibrary.Directory Should Exist  ${destination}

Verify Remote Directory Does Not Exists
    [Arguments]  ${destination}
    SSHLibrary.Directory Should Not Exist  ${destination}

Remote Directory Should Exist With Content
    [Arguments]  ${destination}
    ${items} =  SSHLibrary.List Directory  ${destination}
    Should Contain  ${items}  ${TEST FILE NAME}
    Should Contain  ${items}  ${TEST FILE 2 NAME}
    Should Contain  ${items}  ${FILE WITH NEWLINES NAME}
    Should Not Contain  ${items}  ${SPECIAL TEXTFILES NAME}

Remote Directory Should Exist With Subdirectories
    [Arguments]  ${destination}
    ${items} =  SSHLibrary.List Directory  ${destination}
    Should Contain  ${items}  ${TEST FILE NAME}
    Should Contain  ${items}  ${TEST FILE 2 NAME}
    Should Contain  ${items}  ${FILE WITH NEWLINES NAME}
    Should Contain  ${items}  ${SPECIAL TEXTFILES NAME}
    ${items} =  SSHLibrary.List Directory  ${destination}${/}${SPECIAL TEXTFILES NAME}
    Should Contain  ${items}  ${FILE WITH SPECIAL CHARS NAME}

Remove Remote Files
    [Arguments]  ${destination}
    Execute Command  rm -rf ${destination}
